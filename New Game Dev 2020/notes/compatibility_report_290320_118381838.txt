Converting GML script: ${project_dir}\scripts\camera_initialise\camera_initialise.gml
Converted builtin - line 34: view_wview[view] = view_width -> __view_set( e__VW.WView, view, view_width )
Converted builtin - line 35: view_hview[view] = view_height -> __view_set( e__VW.HView, view, view_height )
Converted builtin - line 31: view_wport[view] = view_width -> __view_set( e__VW.WPort, view, view_width )
Converted builtin - line 32: view_hport[view] = view_height -> __view_set( e__VW.HPort, view, view_height )
Converted description /// @description  camera_initialise(view, width, height, view_width, view_height);/// @param view
/// @param  width
/// @param  height
/// @param  view_width
/// @param  view_height

Converting GML script: ${project_dir}\scripts\camera_center\camera_center.gml
Converted description /// @description  camera_center();

Converting GML script: ${project_dir}\scripts\camera_setposition\camera_setposition.gml
Converted description /// @description  camera_setposition(window_x, window_y);/// @param window_x
/// @param  window_y

Converting GML script: ${project_dir}\scripts\camera_lock\camera_lock.gml
Converted builtin - line 28: view_xview[view] -> __view_get( e__VW.XView, view )
Converted builtin - line 29: view_yview[view] -> __view_get( e__VW.YView, view )
Converted builtin - line 28: view_wview[view] -> __view_get( e__VW.WView, view )
Converted builtin - line 29: view_hview[view] -> __view_get( e__VW.HView, view )
Converted builtin - line 33: view_hborder[view] = 0 -> __view_set( e__VW.HBorder, view, 0 )
Converted builtin - line 34: view_vborder[view] = 0 -> __view_set( e__VW.VBorder, view, 0 )
Converted builtin - line 38: view_object[view] = obj -> __view_set( e__VW.Object, view, obj )
Converted builtin - line 25: view_visible[view] = true -> __view_set( e__VW.Visible, view, true )
Converted description /// @description  camera_lock(view, obj);/// @param view
/// @param  obj
Converted builtin - line 30: view_xview[view] += ((obj.x - (__view_get( e__VW.WView, view ) / 2) - __view_get( e__VW.XView, view )) * 0.1) -> __view_set( e__VW.XView, view, __view_get( e__VW.XView, view ) + (((obj.x - (__view_get( e__VW.WView, view ) / 2) - __view_get( e__VW.XView, view )) * 0.1)) )
Converted builtin - line 31: view_yview[view] += ((obj.y - (__view_get( e__VW.HView, view ) / 2) - __view_get( e__VW.YView, view )) * 0.1) -> __view_set( e__VW.YView, view, __view_get( e__VW.YView, view ) + (((obj.y - (__view_get( e__VW.HView, view ) / 2) - __view_get( e__VW.YView, view )) * 0.1)) )

Converting GML script: ${project_dir}\scripts\camera_zoom\camera_zoom.gml
Converted builtin - line 30: view_wview[view] -> __view_get( e__VW.WView, view )
Converted builtin - line 36: view_wview[view] -> __view_get( e__VW.WView, view )
Converted builtin - line 36: view_wview[view] -> __view_get( e__VW.WView, view )
Converted builtin - line 37: view_wview[view] -> __view_get( e__VW.WView, view )
Converted builtin - line 39: view_wview[view] -> __view_get( e__VW.WView, view )
Converted builtin - line 54: view_wview[view] -> __view_get( e__VW.WView, view )
Converted builtin - line 59: view_wview[view] -> __view_get( e__VW.WView, view )
Converted builtin - line 38: view_wview[view] += zoom_speed -> __view_set( e__VW.WView, view, __view_get( e__VW.WView, view ) + (zoom_speed) )
Converted builtin - line 40: view_wview[view] -= zoom_speed -> __view_set( e__VW.WView, view, __view_get( e__VW.WView, view ) - (zoom_speed) )
Converted builtin - line 55: view_wview[view] = max_width - 1 -> __view_set( e__VW.WView, view, max_width - 1 )
Converted builtin - line 60: view_wview[view] = min_width + 1 -> __view_set( e__VW.WView, view, min_width + 1 )
Converted builtin - line 30: view_hview[view] -> __view_get( e__VW.HView, view )
Converted builtin - line 45: view_hview[view] -> __view_get( e__VW.HView, view )
Converted builtin - line 45: view_hview[view] -> __view_get( e__VW.HView, view )
Converted builtin - line 46: view_hview[view] -> __view_get( e__VW.HView, view )
Converted builtin - line 48: view_hview[view] -> __view_get( e__VW.HView, view )
Converted builtin - line 64: view_hview[view] -> __view_get( e__VW.HView, view )
Converted builtin - line 69: view_hview[view] -> __view_get( e__VW.HView, view )
Converted builtin - line 47: view_hview[view] += (zoom_speed / height_multiplier) -> __view_set( e__VW.HView, view, __view_get( e__VW.HView, view ) + ((zoom_speed / height_multiplier)) )
Converted builtin - line 49: view_hview[view] -= (zoom_speed / height_multiplier) -> __view_set( e__VW.HView, view, __view_get( e__VW.HView, view ) - ((zoom_speed / height_multiplier)) )
Converted builtin - line 65: view_hview[view] = max_height - (1 / height_multiplier) -> __view_set( e__VW.HView, view, max_height - (1 / height_multiplier) )
Converted builtin - line 70: view_hview[view] = min_height + (1 / height_multiplier) -> __view_set( e__VW.HView, view, min_height + (1 / height_multiplier) )
Converted description /// @description  camera_zoom(view, desired_width, zoom_speed, min_width, max_width);/// @param view
/// @param  desired_width
/// @param  zoom_speed
/// @param  min_width
/// @param  max_width

Added compatibility script 'view/__view_get.gml'
Added compatibility script 'view/__view_set.gml'
Added compatibility script 'view/__view_set_internal.gml'
Added compatibility script 'view/__init_view.gml'
Added compatibility script '__init_global.gml'